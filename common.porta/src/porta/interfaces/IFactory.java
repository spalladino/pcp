package porta.interfaces;

import porta.base.BaseParameters;
import porta.io.ModelWriter;
import porta.io.PortaWriter;
import porta.model.BaseConstraint;
import porta.model.BaseFamily;
import porta.model.BaseVariable;
import porta.model.BaseModel;
import porta.poi.IPointsGenerator;
import porta.processing.IProcessor;
import porta.processing.ITranslator;

/**
 * Main interface for projects extending porta common. 
 *
 * @param <ENTITY> Entity object to handle, such as a Graph
 * @param <CONSTRAINT> Constraints used in the model
 * @param <PARAMS> Parameters containing creational info such as node count
 * @param <FAMILY> Family of constraints, used only if generates families during processing 
 * @param <VARIABLE> Variables used, such as node/color pair
 * @param <MODEL> Model class that uses previous types
 */
public interface IFactory<ENTITY,
	CONSTRAINT extends BaseConstraint,
	PARAMS extends BaseParameters,
	FAMILY extends BaseFamily,
	VARIABLE extends BaseVariable,
	MODEL extends BaseModel<CONSTRAINT, FAMILY, PARAMS>
	> {

	/**
	 * Creates a valid points generator, used when generating poi files.
	 * @param graph input entity
	 * @return generator that outputs all valid integer points
	 */
	IPointsGenerator createPointsGenerator(ENTITY graph) throws Exception;
	
	/**
	 * Creates a new translator instance that can translate between porta and model variable names. 
	 * @return a new translator instance
	 */
	ITranslator<VARIABLE> createTranslator();
	
	/**
	 * Creates a processor for the input entity, which is used for post processing a model generated by porta.
	 * @param graph input entity
	 * @param c input parameters
	 * @return processor that must accept a valid model and optionally modify it based on the entity
	 */
	IProcessor createProcessor(ENTITY graph, PARAMS c);

	/**
	 * Creates an empty model based on the input parameters
	 * @param c input parameters
	 * @return empty model to be populated
	 */
	MODEL createModel(PARAMS c);
	
	/**
	 * Creates a model writer for a specific model
	 * @param model model to write
	 * @return writer that outputs the specified model in a friendly format
	 */
	ModelWriter<VARIABLE> createModelWriter(MODEL model);

	/**
	 * Creates a porta writer for a specific model
	 * @param model model to write
	 * @return writer that outputs the specified model in porta format
	 */
	PortaWriter<VARIABLE> createPortaWriter(MODEL model);

	/**
	 * Returns parameters needed for this problem (such as node count).
	 * @return
	 */
	PARAMS getParameters();

	/**
	 * Given an input file, reads a certain entity (such as a graph)
	 * @param filename input file containing the entity
	 * @param preprocess whether to preprocess the entity or leave it as is
	 * @return the entity represented in the file
	 * @throws Exception
	 */
	ENTITY readEntity(String filename, Boolean preprocess) throws Exception;

	/**
	 * Generates a Model with all constraints given an input entity (such as a graph).
	 * @param graph input entity to generate the model for
	 * @return LP model for this entity
	 * @throws Exception
	 */
	MODEL generateModel(ENTITY graph) throws Exception;

	/**
	 * Creates and populates a model from an input file, requires the ability to parse a model.
	 * Used only for facet testing.
	 * @param filename input file in friendly format
	 * @return model
	 * @throws Exception
	 */
	MODEL readModel(String filename) throws Exception;
}
