/**
 * JavaCC file
 */

options {
	JDK_VERSION = "1.6";
	STATIC = false;
}
PARSER_BEGIN(ModelParser)
package pcp.porta.parser;

import pcp.porta.*;
import pcp.porta.processing.*;
import porta.model.*;
import pcp.porta.model.*;
import porta.interfaces.*;

public class ModelParser { 
	Model model;
	Constraint current;
}
PARSER_END(ModelParser)

SKIP :
{
 	" "
|	"\r"
|	"\t"
|	"\n"
}
TOKEN :
{
	< PLUS: "+" >
|	< MINUS: "-" >
| 	< EQUALS: "==">
| 	< LEQ: "<=">
| 	< GEQ: ">=">
| 	< ASSIGN: "=">
| 	< LPAREN: "(">
| 	< RPAREN: ")">
| 	< LBRACKET: "[">
| 	< RBRACKET: "]">
| 	< COMMA: ",">
| 	< COLON: ":">
}
TOKEN :
{
	< INEQS: "INEQUALITIES_SECTION">
| 	< END: "END">
| 	< VARX: "X"|"x" >
| 	< VARW: "W"|"w" >
|	< NUMBER: (["0" - "9"])+ >
|	< NULL: "null" >
|	< COLORS: "COLORS" >
|	< NODES: "NODES" >
}
Model model() : 
{ }
{
	cardinals()
	inequalities()
	(end())?
	{ return this.model; }
}

void cardinals() : 
{
	int n = 0;
	int c = 0;
}
{
	<COLORS> <COLON> (c = natural())
	<NODES> <COLON> (n = natural())
	{
		this.model = new Model(new Parameters(n, c)); 
	}
}

void inequalities() : {}
{
	<INEQS> ( inequality() )+ }

void inequality() :
{
	current = model.createConstraint();
	Integer c, b, i = null;
}
{
	( i=index() )?	( term() )*
	( c=comparison() )
	( b=integer() )
	
	{ current.withBound(b).withCompare(c).withIndex(String.valueOf(i)); }
} 

Integer comparison() : {}
{
	( < EQUALS > { return 0; } )
	| ( < LEQ > { return -1; } )
	| ( < GEQ > { return 1; } )
}

void term() :
{
	int s = 1;
	int n = 1;
	Integer i = null;
	Integer j = null;
}
{
	s = sign()
	( n = natural() )?
	( < VARX > <LBRACKET> i=natural() <COMMA> j=natural() <RBRACKET> { i--; j--; }
	| < VARW > <LBRACKET> j=natural() <RBRACKET>  { j--; })
	
	{ 
		current.addVar(i, j, s * n);
	}
}

int integer() : 
{
	int s = 1;
	int n = 1;
}
{
	( s = sign() )?
	n = natural()
	{ return s * n;}
}

int natural() : 
{
	Token t;
}
{
	t = < NUMBER > { return Integer.valueOf(t.image); }	
}

int sign() : {}{
	( < PLUS >	{ return 1;	} )
	| ( < MINUS >	{ return -1;	} ) }

int index() : 
{
	int i = 0;
}{
	< LPAREN > ( ( i=natural() ) | <NULL> ) < RPAREN >
	{ return i; }}

void end() : {}
{
	< END >
}
