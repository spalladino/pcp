/* Generated By:JavaCC: Do not edit this line. ModelParser.java */
package pcp.porta.parser;

import pcp.porta.*;
import pcp.porta.processing.*;
import porta.model.*;
import pcp.porta.model.*;
import porta.interfaces.*;

@SuppressWarnings("all")
public class ModelParser implements ModelParserConstants {
        PcpModel model;
        Constraint current;

  final public Model model() throws ParseException {
    cardinals();
    inequalities();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case END:
      end();
      break;
    default:
      jj_la1[0] = jj_gen;
      ;
    }
          {if (true) return this.model;}
    throw new Error("Missing return statement in function");
  }

  final public void cardinals() throws ParseException {
        int n = 0;
        int c = 0;
    jj_consume_token(COLORS);
    jj_consume_token(COLON);
    c = natural();
    jj_consume_token(NODES);
    jj_consume_token(COLON);
    n = natural();
                this.model = new PcpModel(new PcpCardinals(n, c));
  }

  final public void inequalities() throws ParseException {
    jj_consume_token(INEQS);
    label_1:
    while (true) {
      inequality();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
      case EQUALS:
      case LEQ:
      case GEQ:
      case LPAREN:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_1;
      }
    }
  }

  final public void inequality() throws ParseException {
        current = model.createConstraint();
        Integer c, b, i = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
      i = index();
      break;
    default:
      jj_la1[2] = jj_gen;
      ;
    }
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_2;
      }
      term();
    }
    c = comparison();
    b = integer();
          current.withBound(b).withCompare(c).withIndex(String.valueOf(i));
  }

  final public Integer comparison() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQUALS:
      jj_consume_token(EQUALS);
                       {if (true) return 0;}
      break;
    case LEQ:
      jj_consume_token(LEQ);
                      {if (true) return -1;}
      break;
    case GEQ:
      jj_consume_token(GEQ);
                      {if (true) return 1;}
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public void term() throws ParseException {
        int s = 1;
        int n = 1;
        Integer i = null;
        Integer j = null;
    s = sign();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUMBER:
      n = natural();
      break;
    default:
      jj_la1[5] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VARX:
      jj_consume_token(VARX);
      jj_consume_token(LBRACKET);
      i = natural();
      jj_consume_token(COMMA);
      j = natural();
      jj_consume_token(RBRACKET);
                                                                           i--; j--;
      break;
    case VARW:
      jj_consume_token(VARW);
      jj_consume_token(LBRACKET);
      j = natural();
      jj_consume_token(RBRACKET);
                                                        j--;
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                current.addVar(i, j, s * n);
  }

  final public int integer() throws ParseException {
        int s = 1;
        int n = 1;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
    case MINUS:
      s = sign();
      break;
    default:
      jj_la1[7] = jj_gen;
      ;
    }
    n = natural();
          {if (true) return s * n;}
    throw new Error("Missing return statement in function");
  }

  final public int natural() throws ParseException {
        Token t;
    t = jj_consume_token(NUMBER);
                         {if (true) return Integer.valueOf(t.image);}
    throw new Error("Missing return statement in function");
  }

  final public int sign() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
      jj_consume_token(PLUS);
                          {if (true) return 1;}
      break;
    case MINUS:
      jj_consume_token(MINUS);
                          {if (true) return -1;}
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public int index() throws ParseException {
        int i = 0;
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUMBER:
      i = natural();
      break;
    case NULL:
      jj_consume_token(NULL);
      break;
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(RPAREN);
          {if (true) return i;}
    throw new Error("Missing return statement in function");
  }

  final public void end() throws ParseException {
    jj_consume_token(END);
  }

  /** Generated Token Manager. */
  public ModelParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[10];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x40000,0xbe0,0x800,0x60,0x380,0x200000,0x180000,0x60,0x60,0x600000,};
   }

  /** Constructor with InputStream. */
  public ModelParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public ModelParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ModelParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 10; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 10; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public ModelParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ModelParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 10; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 10; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public ModelParser(ModelParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 10; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(ModelParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 10; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[25];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 10; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 25; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
